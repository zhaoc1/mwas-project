# Chunyu Zhao
# 2023-08-02

import os
import re
import sys
import yaml
import collections
import configparser
from pathlib import Path, PurePath
from snakemake.utils import update_config, listfiles
from snakemake.exceptions import WorkflowError

from lib.config import load_sample_list, read_seq_ids, validate_config, output_subdir


# Disallow slashes in our sample names during Snakemake's wildcard evaluation.
# Slashes should always be interpreted as directory separators.
wildcard_constraints:
    sample="[^/]+"

# Setting up config files and samples
Cfg = validate_config(config)
Samples = load_sample_list(
            Cfg['all']['samplelist_fp'],
            Cfg['all']['paired_end'],
            Cfg["all"]['root']/Cfg['all']['output_fp']
            )
Pairs = ['1', '2'] if Cfg['all']['paired_end'] else ['1']
CONDA_PATH = Path(os.environ.get('CONDA_PREFIX'))

# Collect host (contaminant) genomes
if Cfg['qc']['host_fp'] == Cfg['all']['root']:
    HostGenomeFiles = []
else:
    HostGenomeFiles = [f for f in Cfg['qc']['host_fp'].glob('*.fasta')] ## fna
    if not HostGenomeFiles:
        sys.stderr.write(
            "\n\nWARNING: No files detected in host genomes folder ({}). "
            "If this is not intentional, make sure all files end in "
            ".fasta and the folder is specified correctly.\n\n".format(
                Cfg['qc']['host_fp']))
HostGenomes = {Path(g.name).stem: read_seq_ids(Cfg['qc']['host_fp'] / g) for g in HostGenomeFiles}

ADAPTERS_DICT = {
            "NexteraPE": "NexteraPE-PE.fa",
            "TruSeq2-PE": "TruSeq2-PE.fa",
            "TruSeq2-SE": "TruSeq2-SE.fa",
            "TruSeq3-PE": "TruSeq3-PE-2.fa",
            "TruSeq3-SE": "TruSeq3-SE.fa"}
ADAPTER_FASTA = ADAPTERS_DICT[Cfg['qc']['adapter_name']]

# Set up output paths for the various steps
QC_FP = output_subdir(Cfg, 'qc')

include: "rules/qc.smk"
include: "rules/reports.smk"


rule samples:
    message: "Samples to be processed:"
    run:
        [print(sample) for sample in sorted(list(Samples.keys()))]
